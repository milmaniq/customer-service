server.port=8080
spring.application.name=customer-service

app.custom-variable=${CUSTOM_VARIABLE:value set from properties file}

spring.datasource.url=jdbc:mysql://${DB_HOST:127.0.0.1}:${DB_PORT:3307}/${DB_NAME:customer_service_db}?createDatabaseIfNotExist=true

# The following line can be used when connecting to a db container in the same network. In the following approach, dont have to specify the port
#spring.datasource.url=jdbc:mysql://${DB_HOST}/${DB_NAME:customer_service_db}?createDatabaseIfNotExist=true

# attempts to fetch the username from an environment variable MYSQL_USER but falls back to using root as the default username if that environment variable is not set.
# this environment variable must be set in the dockerfile or when starting a container from a docker image of this service
spring.datasource.username= ${DB_USERNAME:root}
spring.datasource.password= ${DB_PASSWORD:123456}
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver

# The following property didnt work with AWS RDS
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
